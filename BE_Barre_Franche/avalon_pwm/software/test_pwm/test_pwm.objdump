
test_pwm.elf:     file format elf32-littlenios2
test_pwm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000043c memsz 0x0000043c flags r-x
    LOAD off    0x0000145c vaddr 0x0000845c paddr 0x0000854c align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x0000163c vaddr 0x0000863c paddr 0x0000863c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  0000154c  2**0
                  CONTENTS
  2 .text         00000424  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00008444  00008444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  0000845c  0000854c  0000145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0000863c  0000863c  0000163c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000864c  0000864c  0000154c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000218  00000000  00000000  00001570  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002575  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000da8  00000000  00000000  00003cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000fae  00000000  00000000  00004aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000268  00000000  00000000  00005a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b56  00000000  00000000  00005cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003e5  00000000  00000000  00006812  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00006bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00006c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007c8e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00007c91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007c9d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007c9e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00007c9f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00007ca3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00007ca7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00007cab  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00007cb6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00007cc1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  00007ccc  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00007cd3  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ba5  00000000  00000000  00007d0b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000375d7  00000000  00000000  0000c8b0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008444 l    d  .rodata	00000000 .rodata
0000845c l    d  .rwdata	00000000 .rwdata
0000863c l    d  .bss	00000000 .bss
0000864c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_pwm_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000845c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008350 g     F .text	0000002c alt_main
000080b0 g     F .text	00000080 _puts_r
0000854c g       *ABS*	00000000 __flash_rwdata_start
0000843c g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000863c g     O .bss	00000004 errno
00008644 g     O .bss	00000004 alt_argv
0001053c g       *ABS*	00000000 _gp
00008130 g     F .text	00000014 puts
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000853c g     O .rwdata	00000004 _global_impure_ptr
0000864c g       *ABS*	00000000 __bss_end
00008434 g     F .text	00000004 alt_dcache_flush_all
0000854c g       *ABS*	00000000 __ram_rwdata_end
0000837c g     F .text	00000060 write
0000845c g       *ABS*	00000000 __ram_rodata_end
00008544 g     O .rwdata	00000004 jtag_uart_0
0000864c g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008400 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000083fc g     F .text	00000004 alt_sys_init
0000845c g       *ABS*	00000000 __ram_rwdata_start
00008444 g       *ABS*	00000000 __ram_rodata_start
0000864c g       *ABS*	00000000 __alt_stack_base
00008160 g     F .text	000000b8 __sfvwrite_small_dev
0000863c g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000054 main
00008640 g     O .bss	00000004 alt_envp
00008548 g     O .rwdata	00000004 alt_errno
00008444 g       *ABS*	00000000 __flash_rodata_start
000083dc g     F .text	00000020 alt_irq_init
00008218 g     F .text	00000058 _write_r
00008540 g     O .rwdata	00000004 _impure_ptr
00008648 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000854c g       *ABS*	00000000 _edata
0000864c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008144 g     F .text	0000001c strlen
00008438 g     F .text	00000004 alt_icache_flush_all
00008270 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6814f14 	ori	gp,gp,1340
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a18f14 	ori	r2,r2,34364

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e19314 	ori	r3,r3,34380

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7b08>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00082700 	call	8270 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00083500 	call	8350 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7b1c>

0000805c <main>:
#define duty (unsigned int *) (PWM_0_BASE + 4)
#define control (unsigned int *) (PWM_0_BASE + 8)

int main()
{ 
  printf("Hello from Nios II!\n");
    805c:	01000074 	movhi	r4,1
#define freq (unsigned int *) PWM_0_BASE
#define duty (unsigned int *) (PWM_0_BASE + 4)
#define control (unsigned int *) (PWM_0_BASE + 8)

int main()
{ 
    8060:	deffff04 	addi	sp,sp,-4
  printf("Hello from Nios II!\n");
    8064:	21211104 	addi	r4,r4,-31676
#define freq (unsigned int *) PWM_0_BASE
#define duty (unsigned int *) (PWM_0_BASE + 4)
#define control (unsigned int *) (PWM_0_BASE + 8)

int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  printf("Hello from Nios II!\n");
    806c:	00081300 	call	8130 <puts>
  *freq = 0x0400; // divise clk par 1024
    8070:	00800074 	movhi	r2,1
    8074:	00c10004 	movi	r3,1024
    8078:	10840404 	addi	r2,r2,4112
    807c:	10c00015 	stw	r3,0(r2)
  *duty = 0x0300; // RC = 50%
    8080:	00800074 	movhi	r2,1
    8084:	00c0c004 	movi	r3,768
    8088:	10840504 	addi	r2,r2,4116
    808c:	10c00015 	stw	r3,0(r2)
  *control = 0x3;
    8090:	00800074 	movhi	r2,1
    8094:	00c000c4 	movi	r3,3
    8098:	10840604 	addi	r2,r2,4120
    809c:	10c00015 	stw	r3,0(r2)

  return 0;
}
    80a0:	0005883a 	mov	r2,zero
    80a4:	dfc00017 	ldw	ra,0(sp)
    80a8:	dec00104 	addi	sp,sp,4
    80ac:	f800283a 	ret

000080b0 <_puts_r>:
    80b0:	defffd04 	addi	sp,sp,-12
    80b4:	dc000015 	stw	r16,0(sp)
    80b8:	2021883a 	mov	r16,r4
    80bc:	2809883a 	mov	r4,r5
    80c0:	dfc00215 	stw	ra,8(sp)
    80c4:	dc400115 	stw	r17,4(sp)
    80c8:	2823883a 	mov	r17,r5
    80cc:	00081440 	call	8144 <strlen>
    80d0:	81400217 	ldw	r5,8(r16)
    80d4:	01000074 	movhi	r4,1
    80d8:	21205804 	addi	r4,r4,-32416
    80dc:	29000115 	stw	r4,4(r5)
    80e0:	100f883a 	mov	r7,r2
    80e4:	880d883a 	mov	r6,r17
    80e8:	8009883a 	mov	r4,r16
    80ec:	00081600 	call	8160 <__sfvwrite_small_dev>
    80f0:	00ffffc4 	movi	r3,-1
    80f4:	10c00926 	beq	r2,r3,811c <_puts_r+0x6c>
    80f8:	81400217 	ldw	r5,8(r16)
    80fc:	01800074 	movhi	r6,1
    8100:	01c00044 	movi	r7,1
    8104:	28800117 	ldw	r2,4(r5)
    8108:	31a11604 	addi	r6,r6,-31656
    810c:	8009883a 	mov	r4,r16
    8110:	103ee83a 	callr	r2
    8114:	10bfffe0 	cmpeqi	r2,r2,-1
    8118:	0085c83a 	sub	r2,zero,r2
    811c:	dfc00217 	ldw	ra,8(sp)
    8120:	dc400117 	ldw	r17,4(sp)
    8124:	dc000017 	ldw	r16,0(sp)
    8128:	dec00304 	addi	sp,sp,12
    812c:	f800283a 	ret

00008130 <puts>:
    8130:	00800074 	movhi	r2,1
    8134:	10a15004 	addi	r2,r2,-31424
    8138:	200b883a 	mov	r5,r4
    813c:	11000017 	ldw	r4,0(r2)
    8140:	00080b01 	jmpi	80b0 <_puts_r>

00008144 <strlen>:
    8144:	2005883a 	mov	r2,r4
    8148:	10c00007 	ldb	r3,0(r2)
    814c:	18000226 	beq	r3,zero,8158 <strlen+0x14>
    8150:	10800044 	addi	r2,r2,1
    8154:	003ffc06 	br	8148 <_gp+0xffff7c0c>
    8158:	1105c83a 	sub	r2,r2,r4
    815c:	f800283a 	ret

00008160 <__sfvwrite_small_dev>:
    8160:	2880000b 	ldhu	r2,0(r5)
    8164:	1080020c 	andi	r2,r2,8
    8168:	10002126 	beq	r2,zero,81f0 <__sfvwrite_small_dev+0x90>
    816c:	2880008f 	ldh	r2,2(r5)
    8170:	defffa04 	addi	sp,sp,-24
    8174:	dc000015 	stw	r16,0(sp)
    8178:	dfc00515 	stw	ra,20(sp)
    817c:	dd000415 	stw	r20,16(sp)
    8180:	dcc00315 	stw	r19,12(sp)
    8184:	dc800215 	stw	r18,8(sp)
    8188:	dc400115 	stw	r17,4(sp)
    818c:	2821883a 	mov	r16,r5
    8190:	10001216 	blt	r2,zero,81dc <__sfvwrite_small_dev+0x7c>
    8194:	2027883a 	mov	r19,r4
    8198:	3025883a 	mov	r18,r6
    819c:	3823883a 	mov	r17,r7
    81a0:	05010004 	movi	r20,1024
    81a4:	04400b0e 	bge	zero,r17,81d4 <__sfvwrite_small_dev+0x74>
    81a8:	880f883a 	mov	r7,r17
    81ac:	a440010e 	bge	r20,r17,81b4 <__sfvwrite_small_dev+0x54>
    81b0:	01c10004 	movi	r7,1024
    81b4:	8140008f 	ldh	r5,2(r16)
    81b8:	900d883a 	mov	r6,r18
    81bc:	9809883a 	mov	r4,r19
    81c0:	00082180 	call	8218 <_write_r>
    81c4:	0080050e 	bge	zero,r2,81dc <__sfvwrite_small_dev+0x7c>
    81c8:	88a3c83a 	sub	r17,r17,r2
    81cc:	90a5883a 	add	r18,r18,r2
    81d0:	003ff406 	br	81a4 <_gp+0xffff7c68>
    81d4:	0005883a 	mov	r2,zero
    81d8:	00000706 	br	81f8 <__sfvwrite_small_dev+0x98>
    81dc:	8080000b 	ldhu	r2,0(r16)
    81e0:	10801014 	ori	r2,r2,64
    81e4:	8080000d 	sth	r2,0(r16)
    81e8:	00bfffc4 	movi	r2,-1
    81ec:	00000206 	br	81f8 <__sfvwrite_small_dev+0x98>
    81f0:	00bfffc4 	movi	r2,-1
    81f4:	f800283a 	ret
    81f8:	dfc00517 	ldw	ra,20(sp)
    81fc:	dd000417 	ldw	r20,16(sp)
    8200:	dcc00317 	ldw	r19,12(sp)
    8204:	dc800217 	ldw	r18,8(sp)
    8208:	dc400117 	ldw	r17,4(sp)
    820c:	dc000017 	ldw	r16,0(sp)
    8210:	dec00604 	addi	sp,sp,24
    8214:	f800283a 	ret

00008218 <_write_r>:
    8218:	defffd04 	addi	sp,sp,-12
    821c:	dc000015 	stw	r16,0(sp)
    8220:	04000074 	movhi	r16,1
    8224:	dc400115 	stw	r17,4(sp)
    8228:	84218f04 	addi	r16,r16,-31172
    822c:	2023883a 	mov	r17,r4
    8230:	2809883a 	mov	r4,r5
    8234:	300b883a 	mov	r5,r6
    8238:	380d883a 	mov	r6,r7
    823c:	dfc00215 	stw	ra,8(sp)
    8240:	80000015 	stw	zero,0(r16)
    8244:	000837c0 	call	837c <write>
    8248:	00ffffc4 	movi	r3,-1
    824c:	10c0031e 	bne	r2,r3,825c <_write_r+0x44>
    8250:	80c00017 	ldw	r3,0(r16)
    8254:	18000126 	beq	r3,zero,825c <_write_r+0x44>
    8258:	88c00015 	stw	r3,0(r17)
    825c:	dfc00217 	ldw	ra,8(sp)
    8260:	dc400117 	ldw	r17,4(sp)
    8264:	dc000017 	ldw	r16,0(sp)
    8268:	dec00304 	addi	sp,sp,12
    826c:	f800283a 	ret

00008270 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8270:	deffff04 	addi	sp,sp,-4
    8274:	01000074 	movhi	r4,1
    8278:	01400074 	movhi	r5,1
    827c:	dfc00015 	stw	ra,0(sp)
    8280:	21211704 	addi	r4,r4,-31652
    8284:	29615304 	addi	r5,r5,-31412

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8288:	2140061e 	bne	r4,r5,82a4 <alt_load+0x34>
    828c:	01000074 	movhi	r4,1
    8290:	01400074 	movhi	r5,1
    8294:	21200804 	addi	r4,r4,-32736
    8298:	29600804 	addi	r5,r5,-32736
    829c:	2140121e 	bne	r4,r5,82e8 <alt_load+0x78>
    82a0:	00000b06 	br	82d0 <alt_load+0x60>
    82a4:	00c00074 	movhi	r3,1
    82a8:	18e15304 	addi	r3,r3,-31412
    82ac:	1907c83a 	sub	r3,r3,r4
    82b0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    82b4:	10fff526 	beq	r2,r3,828c <_gp+0xffff7d50>
    {
      *to++ = *from++;
    82b8:	114f883a 	add	r7,r2,r5
    82bc:	39c00017 	ldw	r7,0(r7)
    82c0:	110d883a 	add	r6,r2,r4
    82c4:	10800104 	addi	r2,r2,4
    82c8:	31c00015 	stw	r7,0(r6)
    82cc:	003ff906 	br	82b4 <_gp+0xffff7d78>
    82d0:	01000074 	movhi	r4,1
    82d4:	01400074 	movhi	r5,1
    82d8:	21211104 	addi	r4,r4,-31676
    82dc:	29611104 	addi	r5,r5,-31676

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    82e0:	2140101e 	bne	r4,r5,8324 <alt_load+0xb4>
    82e4:	00000b06 	br	8314 <alt_load+0xa4>
    82e8:	00c00074 	movhi	r3,1
    82ec:	18e00804 	addi	r3,r3,-32736
    82f0:	1907c83a 	sub	r3,r3,r4
    82f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    82f8:	10fff526 	beq	r2,r3,82d0 <_gp+0xffff7d94>
    {
      *to++ = *from++;
    82fc:	114f883a 	add	r7,r2,r5
    8300:	39c00017 	ldw	r7,0(r7)
    8304:	110d883a 	add	r6,r2,r4
    8308:	10800104 	addi	r2,r2,4
    830c:	31c00015 	stw	r7,0(r6)
    8310:	003ff906 	br	82f8 <_gp+0xffff7dbc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8314:	00084340 	call	8434 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8318:	dfc00017 	ldw	ra,0(sp)
    831c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8320:	00084381 	jmpi	8438 <alt_icache_flush_all>
    8324:	00c00074 	movhi	r3,1
    8328:	18e11704 	addi	r3,r3,-31652
    832c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8330:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8334:	18bff726 	beq	r3,r2,8314 <_gp+0xffff7dd8>
    {
      *to++ = *from++;
    8338:	114f883a 	add	r7,r2,r5
    833c:	39c00017 	ldw	r7,0(r7)
    8340:	110d883a 	add	r6,r2,r4
    8344:	10800104 	addi	r2,r2,4
    8348:	31c00015 	stw	r7,0(r6)
    834c:	003ff906 	br	8334 <_gp+0xffff7df8>

00008350 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8350:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8354:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8358:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    835c:	00083dc0 	call	83dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8360:	00083fc0 	call	83fc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8364:	d1a04117 	ldw	r6,-32508(gp)
    8368:	d1604217 	ldw	r5,-32504(gp)
    836c:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8370:	dfc00017 	ldw	ra,0(sp)
    8374:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8378:	000805c1 	jmpi	805c <main>

0000837c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    837c:	00800044 	movi	r2,1
    8380:	20800226 	beq	r4,r2,838c <write+0x10>
    8384:	00800084 	movi	r2,2
    8388:	2080041e 	bne	r4,r2,839c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    838c:	01000074 	movhi	r4,1
    8390:	000f883a 	mov	r7,zero
    8394:	21215104 	addi	r4,r4,-31420
    8398:	00084001 	jmpi	8400 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    839c:	d0a00317 	ldw	r2,-32756(gp)
    83a0:	10000926 	beq	r2,zero,83c8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    83a4:	deffff04 	addi	sp,sp,-4
    83a8:	dfc00015 	stw	ra,0(sp)
    83ac:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    83b0:	00c01444 	movi	r3,81
    83b4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    83b8:	00bfffc4 	movi	r2,-1
    83bc:	dfc00017 	ldw	ra,0(sp)
    83c0:	dec00104 	addi	sp,sp,4
    83c4:	f800283a 	ret
    83c8:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    83cc:	00c01444 	movi	r3,81
    83d0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    83d4:	00bfffc4 	movi	r2,-1
    83d8:	f800283a 	ret

000083dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    83dc:	deffff04 	addi	sp,sp,-4
    83e0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    83e4:	000843c0 	call	843c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    83e8:	00800044 	movi	r2,1
    83ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    83f0:	dfc00017 	ldw	ra,0(sp)
    83f4:	dec00104 	addi	sp,sp,4
    83f8:	f800283a 	ret

000083fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    83fc:	f800283a 	ret

00008400 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8400:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8404:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8408:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    840c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8410:	2980072e 	bgeu	r5,r6,8430 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8414:	38c00037 	ldwio	r3,0(r7)
    8418:	18ffffec 	andhi	r3,r3,65535
    841c:	183ffc26 	beq	r3,zero,8410 <_gp+0xffff7ed4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8420:	28c00007 	ldb	r3,0(r5)
    8424:	20c00035 	stwio	r3,0(r4)
    8428:	29400044 	addi	r5,r5,1
    842c:	003ff806 	br	8410 <_gp+0xffff7ed4>

  return count;
}
    8430:	f800283a 	ret

00008434 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8434:	f800283a 	ret

00008438 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8438:	f800283a 	ret

0000843c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    843c:	000170fa 	wrctl	ienable,zero
    8440:	f800283a 	ret
