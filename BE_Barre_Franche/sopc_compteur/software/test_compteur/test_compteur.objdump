
test_compteur.elf:     file format elf32-littlenios2
test_compteur.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000418 memsz 0x00000418 flags r-x
    LOAD off    0x00001438 vaddr 0x00008438 paddr 0x00008528 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001618 vaddr 0x00008618 paddr 0x00008618 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001528  2**0
                  CONTENTS
  2 .text         00000404  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000014  00008424  00008424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008438  00008528  00001438  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008618  00008618  00001618  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00008628  00008628  00001528  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000218  00000000  00000000  00001550  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000025a5  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000dc7  00000000  00000000  00003d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000fe5  00000000  00000000  00004ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000264  00000000  00000000  00005abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b66  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000407  00000000  00000000  00006886  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00006c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00006ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007d2e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00007d31  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007d3d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007d3e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00007d3f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00007d43  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00007d47  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00007d4b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00007d56  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00007d61  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00007d6c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  00007d74  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c91  00000000  00000000  00007daf  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003f619  00000000  00000000  0000ca40  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008424 l    d  .rodata	00000000 .rodata
00008438 l    d  .rwdata	00000000 .rwdata
00008618 l    d  .bss	00000000 .bss
00008628 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_compteur_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008438 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008330 g     F .text	0000002c alt_main
00008090 g     F .text	00000080 _puts_r
00008528 g       *ABS*	00000000 __flash_rwdata_start
0000841c g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008618 g     O .bss	00000004 errno
00008620 g     O .bss	00000004 alt_argv
00010518 g       *ABS*	00000000 _gp
00008110 g     F .text	00000014 puts
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008518 g     O .rwdata	00000004 _global_impure_ptr
00008628 g       *ABS*	00000000 __bss_end
00008414 g     F .text	00000004 alt_dcache_flush_all
00008528 g       *ABS*	00000000 __ram_rwdata_end
0000835c g     F .text	00000060 write
00008438 g       *ABS*	00000000 __ram_rodata_end
00008520 g     O .rwdata	00000004 jtag_uart_0
00008628 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
000083e0 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000083dc g     F .text	00000004 alt_sys_init
00008438 g       *ABS*	00000000 __ram_rwdata_start
00008424 g       *ABS*	00000000 __ram_rodata_start
00008628 g       *ABS*	00000000 __alt_stack_base
00008140 g     F .text	000000b8 __sfvwrite_small_dev
00008618 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000034 main
0000861c g     O .bss	00000004 alt_envp
00008524 g     O .rwdata	00000004 alt_errno
00008424 g       *ABS*	00000000 __flash_rodata_start
000083bc g     F .text	00000020 alt_irq_init
000081f8 g     F .text	00000058 _write_r
0000851c g     O .rwdata	00000004 _impure_ptr
00008624 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008528 g       *ABS*	00000000 _edata
00008628 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008124 g     F .text	0000001c strlen
00008418 g     F .text	00000004 alt_icache_flush_all
00008250 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6814614 	ori	gp,gp,1304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a18614 	ori	r2,r2,34328

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e18a14 	ori	r3,r3,34344

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7b2c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00082500 	call	8250 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00083300 	call	8330 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7b40>

0000805c <main>:
#include "altera_avalon_pio_regs.h"

int main()
{ 
  int in,  out;
  printf("Hello from II!\n");
    805c:	01000074 	movhi	r4,1
#include "stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
    8060:	deffff04 	addi	sp,sp,-4
  int in,  out;
  printf("Hello from II!\n");
    8064:	21210904 	addi	r4,r4,-31708
#include "stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  int in,  out;
  printf("Hello from II!\n");
    806c:	00081100 	call	8110 <puts>

  /* Event loop never exits. */
  while (1){
	  //IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x07);
	  in = (IORD_ALTERA_AVALON_PIO_DATA(BOUTTONS_BASE)) & 0x02;
    8070:	01000074 	movhi	r4,1
	  out = in;
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, out);
    8074:	00c00074 	movhi	r3,1
  printf("Hello from II!\n");

  /* Event loop never exits. */
  while (1){
	  //IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x07);
	  in = (IORD_ALTERA_AVALON_PIO_DATA(BOUTTONS_BASE)) & 0x02;
    8078:	21040c04 	addi	r4,r4,4144
	  out = in;
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, out);
    807c:	18c40804 	addi	r3,r3,4128
  printf("Hello from II!\n");

  /* Event loop never exits. */
  while (1){
	  //IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x07);
	  in = (IORD_ALTERA_AVALON_PIO_DATA(BOUTTONS_BASE)) & 0x02;
    8080:	20800037 	ldwio	r2,0(r4)
	  out = in;
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, out);
    8084:	1080008c 	andi	r2,r2,2
    8088:	18800035 	stwio	r2,0(r3)
    808c:	003ffc06 	br	8080 <_gp+0xffff7b68>

00008090 <_puts_r>:
    8090:	defffd04 	addi	sp,sp,-12
    8094:	dc000015 	stw	r16,0(sp)
    8098:	2021883a 	mov	r16,r4
    809c:	2809883a 	mov	r4,r5
    80a0:	dfc00215 	stw	ra,8(sp)
    80a4:	dc400115 	stw	r17,4(sp)
    80a8:	2823883a 	mov	r17,r5
    80ac:	00081240 	call	8124 <strlen>
    80b0:	81400217 	ldw	r5,8(r16)
    80b4:	01000074 	movhi	r4,1
    80b8:	21205004 	addi	r4,r4,-32448
    80bc:	29000115 	stw	r4,4(r5)
    80c0:	100f883a 	mov	r7,r2
    80c4:	880d883a 	mov	r6,r17
    80c8:	8009883a 	mov	r4,r16
    80cc:	00081400 	call	8140 <__sfvwrite_small_dev>
    80d0:	00ffffc4 	movi	r3,-1
    80d4:	10c00926 	beq	r2,r3,80fc <_puts_r+0x6c>
    80d8:	81400217 	ldw	r5,8(r16)
    80dc:	01800074 	movhi	r6,1
    80e0:	01c00044 	movi	r7,1
    80e4:	28800117 	ldw	r2,4(r5)
    80e8:	31a10d04 	addi	r6,r6,-31692
    80ec:	8009883a 	mov	r4,r16
    80f0:	103ee83a 	callr	r2
    80f4:	10bfffe0 	cmpeqi	r2,r2,-1
    80f8:	0085c83a 	sub	r2,zero,r2
    80fc:	dfc00217 	ldw	ra,8(sp)
    8100:	dc400117 	ldw	r17,4(sp)
    8104:	dc000017 	ldw	r16,0(sp)
    8108:	dec00304 	addi	sp,sp,12
    810c:	f800283a 	ret

00008110 <puts>:
    8110:	00800074 	movhi	r2,1
    8114:	10a14704 	addi	r2,r2,-31460
    8118:	200b883a 	mov	r5,r4
    811c:	11000017 	ldw	r4,0(r2)
    8120:	00080901 	jmpi	8090 <_puts_r>

00008124 <strlen>:
    8124:	2005883a 	mov	r2,r4
    8128:	10c00007 	ldb	r3,0(r2)
    812c:	18000226 	beq	r3,zero,8138 <strlen+0x14>
    8130:	10800044 	addi	r2,r2,1
    8134:	003ffc06 	br	8128 <_gp+0xffff7c10>
    8138:	1105c83a 	sub	r2,r2,r4
    813c:	f800283a 	ret

00008140 <__sfvwrite_small_dev>:
    8140:	2880000b 	ldhu	r2,0(r5)
    8144:	1080020c 	andi	r2,r2,8
    8148:	10002126 	beq	r2,zero,81d0 <__sfvwrite_small_dev+0x90>
    814c:	2880008f 	ldh	r2,2(r5)
    8150:	defffa04 	addi	sp,sp,-24
    8154:	dc000015 	stw	r16,0(sp)
    8158:	dfc00515 	stw	ra,20(sp)
    815c:	dd000415 	stw	r20,16(sp)
    8160:	dcc00315 	stw	r19,12(sp)
    8164:	dc800215 	stw	r18,8(sp)
    8168:	dc400115 	stw	r17,4(sp)
    816c:	2821883a 	mov	r16,r5
    8170:	10001216 	blt	r2,zero,81bc <__sfvwrite_small_dev+0x7c>
    8174:	2027883a 	mov	r19,r4
    8178:	3025883a 	mov	r18,r6
    817c:	3823883a 	mov	r17,r7
    8180:	05010004 	movi	r20,1024
    8184:	04400b0e 	bge	zero,r17,81b4 <__sfvwrite_small_dev+0x74>
    8188:	880f883a 	mov	r7,r17
    818c:	a440010e 	bge	r20,r17,8194 <__sfvwrite_small_dev+0x54>
    8190:	01c10004 	movi	r7,1024
    8194:	8140008f 	ldh	r5,2(r16)
    8198:	900d883a 	mov	r6,r18
    819c:	9809883a 	mov	r4,r19
    81a0:	00081f80 	call	81f8 <_write_r>
    81a4:	0080050e 	bge	zero,r2,81bc <__sfvwrite_small_dev+0x7c>
    81a8:	88a3c83a 	sub	r17,r17,r2
    81ac:	90a5883a 	add	r18,r18,r2
    81b0:	003ff406 	br	8184 <_gp+0xffff7c6c>
    81b4:	0005883a 	mov	r2,zero
    81b8:	00000706 	br	81d8 <__sfvwrite_small_dev+0x98>
    81bc:	8080000b 	ldhu	r2,0(r16)
    81c0:	10801014 	ori	r2,r2,64
    81c4:	8080000d 	sth	r2,0(r16)
    81c8:	00bfffc4 	movi	r2,-1
    81cc:	00000206 	br	81d8 <__sfvwrite_small_dev+0x98>
    81d0:	00bfffc4 	movi	r2,-1
    81d4:	f800283a 	ret
    81d8:	dfc00517 	ldw	ra,20(sp)
    81dc:	dd000417 	ldw	r20,16(sp)
    81e0:	dcc00317 	ldw	r19,12(sp)
    81e4:	dc800217 	ldw	r18,8(sp)
    81e8:	dc400117 	ldw	r17,4(sp)
    81ec:	dc000017 	ldw	r16,0(sp)
    81f0:	dec00604 	addi	sp,sp,24
    81f4:	f800283a 	ret

000081f8 <_write_r>:
    81f8:	defffd04 	addi	sp,sp,-12
    81fc:	dc000015 	stw	r16,0(sp)
    8200:	04000074 	movhi	r16,1
    8204:	dc400115 	stw	r17,4(sp)
    8208:	84218604 	addi	r16,r16,-31208
    820c:	2023883a 	mov	r17,r4
    8210:	2809883a 	mov	r4,r5
    8214:	300b883a 	mov	r5,r6
    8218:	380d883a 	mov	r6,r7
    821c:	dfc00215 	stw	ra,8(sp)
    8220:	80000015 	stw	zero,0(r16)
    8224:	000835c0 	call	835c <write>
    8228:	00ffffc4 	movi	r3,-1
    822c:	10c0031e 	bne	r2,r3,823c <_write_r+0x44>
    8230:	80c00017 	ldw	r3,0(r16)
    8234:	18000126 	beq	r3,zero,823c <_write_r+0x44>
    8238:	88c00015 	stw	r3,0(r17)
    823c:	dfc00217 	ldw	ra,8(sp)
    8240:	dc400117 	ldw	r17,4(sp)
    8244:	dc000017 	ldw	r16,0(sp)
    8248:	dec00304 	addi	sp,sp,12
    824c:	f800283a 	ret

00008250 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8250:	deffff04 	addi	sp,sp,-4
    8254:	01000074 	movhi	r4,1
    8258:	01400074 	movhi	r5,1
    825c:	dfc00015 	stw	ra,0(sp)
    8260:	21210e04 	addi	r4,r4,-31688
    8264:	29614a04 	addi	r5,r5,-31448

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8268:	2140061e 	bne	r4,r5,8284 <alt_load+0x34>
    826c:	01000074 	movhi	r4,1
    8270:	01400074 	movhi	r5,1
    8274:	21200804 	addi	r4,r4,-32736
    8278:	29600804 	addi	r5,r5,-32736
    827c:	2140121e 	bne	r4,r5,82c8 <alt_load+0x78>
    8280:	00000b06 	br	82b0 <alt_load+0x60>
    8284:	00c00074 	movhi	r3,1
    8288:	18e14a04 	addi	r3,r3,-31448
    828c:	1907c83a 	sub	r3,r3,r4
    8290:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8294:	10fff526 	beq	r2,r3,826c <_gp+0xffff7d54>
    {
      *to++ = *from++;
    8298:	114f883a 	add	r7,r2,r5
    829c:	39c00017 	ldw	r7,0(r7)
    82a0:	110d883a 	add	r6,r2,r4
    82a4:	10800104 	addi	r2,r2,4
    82a8:	31c00015 	stw	r7,0(r6)
    82ac:	003ff906 	br	8294 <_gp+0xffff7d7c>
    82b0:	01000074 	movhi	r4,1
    82b4:	01400074 	movhi	r5,1
    82b8:	21210904 	addi	r4,r4,-31708
    82bc:	29610904 	addi	r5,r5,-31708

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    82c0:	2140101e 	bne	r4,r5,8304 <alt_load+0xb4>
    82c4:	00000b06 	br	82f4 <alt_load+0xa4>
    82c8:	00c00074 	movhi	r3,1
    82cc:	18e00804 	addi	r3,r3,-32736
    82d0:	1907c83a 	sub	r3,r3,r4
    82d4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    82d8:	10fff526 	beq	r2,r3,82b0 <_gp+0xffff7d98>
    {
      *to++ = *from++;
    82dc:	114f883a 	add	r7,r2,r5
    82e0:	39c00017 	ldw	r7,0(r7)
    82e4:	110d883a 	add	r6,r2,r4
    82e8:	10800104 	addi	r2,r2,4
    82ec:	31c00015 	stw	r7,0(r6)
    82f0:	003ff906 	br	82d8 <_gp+0xffff7dc0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    82f4:	00084140 	call	8414 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    82f8:	dfc00017 	ldw	ra,0(sp)
    82fc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8300:	00084181 	jmpi	8418 <alt_icache_flush_all>
    8304:	00c00074 	movhi	r3,1
    8308:	18e10e04 	addi	r3,r3,-31688
    830c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8310:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8314:	18bff726 	beq	r3,r2,82f4 <_gp+0xffff7ddc>
    {
      *to++ = *from++;
    8318:	114f883a 	add	r7,r2,r5
    831c:	39c00017 	ldw	r7,0(r7)
    8320:	110d883a 	add	r6,r2,r4
    8324:	10800104 	addi	r2,r2,4
    8328:	31c00015 	stw	r7,0(r6)
    832c:	003ff906 	br	8314 <_gp+0xffff7dfc>

00008330 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8330:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8334:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8338:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    833c:	00083bc0 	call	83bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8340:	00083dc0 	call	83dc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8344:	d1a04117 	ldw	r6,-32508(gp)
    8348:	d1604217 	ldw	r5,-32504(gp)
    834c:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8350:	dfc00017 	ldw	ra,0(sp)
    8354:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8358:	000805c1 	jmpi	805c <main>

0000835c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    835c:	00800044 	movi	r2,1
    8360:	20800226 	beq	r4,r2,836c <write+0x10>
    8364:	00800084 	movi	r2,2
    8368:	2080041e 	bne	r4,r2,837c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    836c:	01000074 	movhi	r4,1
    8370:	000f883a 	mov	r7,zero
    8374:	21214804 	addi	r4,r4,-31456
    8378:	00083e01 	jmpi	83e0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    837c:	d0a00317 	ldw	r2,-32756(gp)
    8380:	10000926 	beq	r2,zero,83a8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8384:	deffff04 	addi	sp,sp,-4
    8388:	dfc00015 	stw	ra,0(sp)
    838c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8390:	00c01444 	movi	r3,81
    8394:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8398:	00bfffc4 	movi	r2,-1
    839c:	dfc00017 	ldw	ra,0(sp)
    83a0:	dec00104 	addi	sp,sp,4
    83a4:	f800283a 	ret
    83a8:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    83ac:	00c01444 	movi	r3,81
    83b0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    83b4:	00bfffc4 	movi	r2,-1
    83b8:	f800283a 	ret

000083bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    83bc:	deffff04 	addi	sp,sp,-4
    83c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    83c4:	000841c0 	call	841c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    83c8:	00800044 	movi	r2,1
    83cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    83d0:	dfc00017 	ldw	ra,0(sp)
    83d4:	dec00104 	addi	sp,sp,4
    83d8:	f800283a 	ret

000083dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    83dc:	f800283a 	ret

000083e0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    83e0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    83e4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    83e8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    83ec:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    83f0:	2980072e 	bgeu	r5,r6,8410 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    83f4:	38c00037 	ldwio	r3,0(r7)
    83f8:	18ffffec 	andhi	r3,r3,65535
    83fc:	183ffc26 	beq	r3,zero,83f0 <_gp+0xffff7ed8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8400:	28c00007 	ldb	r3,0(r5)
    8404:	20c00035 	stwio	r3,0(r4)
    8408:	29400044 	addi	r5,r5,1
    840c:	003ff806 	br	83f0 <_gp+0xffff7ed8>

  return count;
}
    8410:	f800283a 	ret

00008414 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8414:	f800283a 	ret

00008418 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8418:	f800283a 	ret

0000841c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    841c:	000170fa 	wrctl	ienable,zero
    8420:	f800283a 	ret
