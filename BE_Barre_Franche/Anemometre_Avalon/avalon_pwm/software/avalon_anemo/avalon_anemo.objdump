
avalon_anemo.elf:     file format elf32-littlenios2
avalon_anemo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000c68 memsz 0x00000c68 flags r-x
    LOAD off    0x00001c88 vaddr 0x00008c88 paddr 0x00008d78 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001e68 vaddr 0x00008e68 paddr 0x00008e68 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001d78  2**0
                  CONTENTS
  2 .text         00000c2c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00008c4c  00008c4c  00001c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008c88  00008d78  00001c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008e68  00008e68  00001e68  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00008e78  00008e78  00001d78  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003b00  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013e0  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000016df  00000000  00000000  00006f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003a8  00000000  00000000  00008610  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fe5  00000000  00000000  000089b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001377  00000000  00000000  0000999d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000ad14  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  0000ad28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c086  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000c089  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c095  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c096  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000c097  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000c09b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000c09f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000c0a3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000c0ae  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0000c0b9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  0000c0c4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004a  00000000  00000000  0000c0cb  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ba5  00000000  00000000  0000c115  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003c6ec  00000000  00000000  00010cba  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008c4c l    d  .rodata	00000000 .rodata
00008c88 l    d  .rwdata	00000000 .rwdata
00008e68 l    d  .bss	00000000 .bss
00008e78 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../avalon_anemo_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000081d8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008c88 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008b58 g     F .text	0000002c alt_main
00008128 g     F .text	00000080 _puts_r
00008d78 g       *ABS*	00000000 __flash_rwdata_start
000080dc g     F .text	0000004c printf
00008c44 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008e68 g     O .bss	00000004 errno
00008e70 g     O .bss	00000004 alt_argv
00010d68 g       *ABS*	00000000 _gp
000081a8 g     F .text	00000014 puts
000080a0 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008994 g     F .text	00000064 .hidden __udivsi3
00008d68 g     O .rwdata	00000004 _global_impure_ptr
00008e78 g       *ABS*	00000000 __bss_end
00008c3c g     F .text	00000004 alt_dcache_flush_all
00008d78 g       *ABS*	00000000 __ram_rwdata_end
00008b84 g     F .text	00000060 write
00008c88 g       *ABS*	00000000 __ram_rodata_end
00008d70 g     O .rwdata	00000004 jtag_uart_0
000089f8 g     F .text	00000058 .hidden __umodsi3
00008e78 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008c08 g     F .text	00000034 altera_avalon_jtag_uart_write
00008244 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008c04 g     F .text	00000004 alt_sys_init
00008a50 g     F .text	00000028 .hidden __mulsi3
00008c88 g       *ABS*	00000000 __ram_rwdata_start
00008c4c g       *ABS*	00000000 __ram_rodata_start
00008e78 g       *ABS*	00000000 __alt_stack_base
0000878c g     F .text	000000b8 __sfvwrite_small_dev
00008e68 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000044 main
00008e6c g     O .bss	00000004 alt_envp
00008d74 g     O .rwdata	00000004 alt_errno
0000889c g     F .text	00000084 .hidden __divsi3
00008c4c g       *ABS*	00000000 __flash_rodata_start
00008be4 g     F .text	00000020 alt_irq_init
00008844 g     F .text	00000058 _write_r
00008d6c g     O .rwdata	00000004 _impure_ptr
00008e74 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008d78 g       *ABS*	00000000 _edata
00008e78 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008920 g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000081bc g     F .text	0000001c strlen
00008c40 g     F .text	00000004 alt_icache_flush_all
00008770 g     F .text	0000001c __vfprintf_internal
00008a78 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6835a14 	ori	gp,gp,3432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a39a14 	ori	r2,r2,36456

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e39e14 	ori	r3,r3,36472

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff72dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008a780 	call	8a78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008b580 	call	8b58 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff72f0>

0000805c <main>:
#define continu (unsigned int *) ANEMO_0_BASE
#define data (unsigned int *) (ANEMO_0_BASE + 4)

int main()
{ 
  printf("This is the Avalon version of the Anemometre!\n");
    805c:	01000074 	movhi	r4,1

#define continu (unsigned int *) ANEMO_0_BASE
#define data (unsigned int *) (ANEMO_0_BASE + 4)

int main()
{ 
    8060:	defffe04 	addi	sp,sp,-8
  printf("This is the Avalon version of the Anemometre!\n");
    8064:	21231304 	addi	r4,r4,-29620

#define continu (unsigned int *) ANEMO_0_BASE
#define data (unsigned int *) (ANEMO_0_BASE + 4)

int main()
{ 
    8068:	dc000015 	stw	r16,0(sp)
    806c:	dfc00115 	stw	ra,4(sp)
  printf("This is the Avalon version of the Anemometre!\n");
    8070:	00081a80 	call	81a8 <puts>
  *continu = 0x2;
    8074:	00800074 	movhi	r2,1
    8078:	00c00084 	movi	r3,2
    807c:	10840804 	addi	r2,r2,4128

  while (1){
	  int anemo_data = *data;
    8080:	04000074 	movhi	r16,1
#define data (unsigned int *) (ANEMO_0_BASE + 4)

int main()
{ 
  printf("This is the Avalon version of the Anemometre!\n");
  *continu = 0x2;
    8084:	10c00015 	stw	r3,0(r2)

  while (1){
	  int anemo_data = *data;
    8088:	84040904 	addi	r16,r16,4132
	  printf("%d \n", anemo_data & 0xFF);
    808c:	81400003 	ldbu	r5,0(r16)
    8090:	01000074 	movhi	r4,1
    8094:	21231f04 	addi	r4,r4,-29572
    8098:	00080dc0 	call	80dc <printf>
    809c:	003ffb06 	br	808c <_gp+0xffff7324>

000080a0 <_printf_r>:
    80a0:	defffd04 	addi	sp,sp,-12
    80a4:	dfc00015 	stw	ra,0(sp)
    80a8:	d9800115 	stw	r6,4(sp)
    80ac:	d9c00215 	stw	r7,8(sp)
    80b0:	20c00217 	ldw	r3,8(r4)
    80b4:	01800074 	movhi	r6,1
    80b8:	31a1e304 	addi	r6,r6,-30836
    80bc:	19800115 	stw	r6,4(r3)
    80c0:	280d883a 	mov	r6,r5
    80c4:	21400217 	ldw	r5,8(r4)
    80c8:	d9c00104 	addi	r7,sp,4
    80cc:	00082440 	call	8244 <___vfprintf_internal_r>
    80d0:	dfc00017 	ldw	ra,0(sp)
    80d4:	dec00304 	addi	sp,sp,12
    80d8:	f800283a 	ret

000080dc <printf>:
    80dc:	defffc04 	addi	sp,sp,-16
    80e0:	dfc00015 	stw	ra,0(sp)
    80e4:	d9400115 	stw	r5,4(sp)
    80e8:	d9800215 	stw	r6,8(sp)
    80ec:	d9c00315 	stw	r7,12(sp)
    80f0:	00800074 	movhi	r2,1
    80f4:	10a35b04 	addi	r2,r2,-29332
    80f8:	10800017 	ldw	r2,0(r2)
    80fc:	01400074 	movhi	r5,1
    8100:	2961e304 	addi	r5,r5,-30836
    8104:	10c00217 	ldw	r3,8(r2)
    8108:	d9800104 	addi	r6,sp,4
    810c:	19400115 	stw	r5,4(r3)
    8110:	200b883a 	mov	r5,r4
    8114:	11000217 	ldw	r4,8(r2)
    8118:	00087700 	call	8770 <__vfprintf_internal>
    811c:	dfc00017 	ldw	ra,0(sp)
    8120:	dec00404 	addi	sp,sp,16
    8124:	f800283a 	ret

00008128 <_puts_r>:
    8128:	defffd04 	addi	sp,sp,-12
    812c:	dc000015 	stw	r16,0(sp)
    8130:	2021883a 	mov	r16,r4
    8134:	2809883a 	mov	r4,r5
    8138:	dfc00215 	stw	ra,8(sp)
    813c:	dc400115 	stw	r17,4(sp)
    8140:	2823883a 	mov	r17,r5
    8144:	00081bc0 	call	81bc <strlen>
    8148:	81400217 	ldw	r5,8(r16)
    814c:	01000074 	movhi	r4,1
    8150:	2121e304 	addi	r4,r4,-30836
    8154:	29000115 	stw	r4,4(r5)
    8158:	100f883a 	mov	r7,r2
    815c:	880d883a 	mov	r6,r17
    8160:	8009883a 	mov	r4,r16
    8164:	000878c0 	call	878c <__sfvwrite_small_dev>
    8168:	00ffffc4 	movi	r3,-1
    816c:	10c00926 	beq	r2,r3,8194 <_puts_r+0x6c>
    8170:	81400217 	ldw	r5,8(r16)
    8174:	01800074 	movhi	r6,1
    8178:	01c00044 	movi	r7,1
    817c:	28800117 	ldw	r2,4(r5)
    8180:	31a32104 	addi	r6,r6,-29564
    8184:	8009883a 	mov	r4,r16
    8188:	103ee83a 	callr	r2
    818c:	10bfffe0 	cmpeqi	r2,r2,-1
    8190:	0085c83a 	sub	r2,zero,r2
    8194:	dfc00217 	ldw	ra,8(sp)
    8198:	dc400117 	ldw	r17,4(sp)
    819c:	dc000017 	ldw	r16,0(sp)
    81a0:	dec00304 	addi	sp,sp,12
    81a4:	f800283a 	ret

000081a8 <puts>:
    81a8:	00800074 	movhi	r2,1
    81ac:	10a35b04 	addi	r2,r2,-29332
    81b0:	200b883a 	mov	r5,r4
    81b4:	11000017 	ldw	r4,0(r2)
    81b8:	00081281 	jmpi	8128 <_puts_r>

000081bc <strlen>:
    81bc:	2005883a 	mov	r2,r4
    81c0:	10c00007 	ldb	r3,0(r2)
    81c4:	18000226 	beq	r3,zero,81d0 <strlen+0x14>
    81c8:	10800044 	addi	r2,r2,1
    81cc:	003ffc06 	br	81c0 <_gp+0xffff7458>
    81d0:	1105c83a 	sub	r2,r2,r4
    81d4:	f800283a 	ret

000081d8 <print_repeat>:
    81d8:	defffb04 	addi	sp,sp,-20
    81dc:	dc800315 	stw	r18,12(sp)
    81e0:	dc400215 	stw	r17,8(sp)
    81e4:	dc000115 	stw	r16,4(sp)
    81e8:	dfc00415 	stw	ra,16(sp)
    81ec:	2025883a 	mov	r18,r4
    81f0:	2823883a 	mov	r17,r5
    81f4:	d9800005 	stb	r6,0(sp)
    81f8:	3821883a 	mov	r16,r7
    81fc:	04000a0e 	bge	zero,r16,8228 <print_repeat+0x50>
    8200:	88800117 	ldw	r2,4(r17)
    8204:	01c00044 	movi	r7,1
    8208:	d80d883a 	mov	r6,sp
    820c:	880b883a 	mov	r5,r17
    8210:	9009883a 	mov	r4,r18
    8214:	103ee83a 	callr	r2
    8218:	843fffc4 	addi	r16,r16,-1
    821c:	103ff726 	beq	r2,zero,81fc <_gp+0xffff7494>
    8220:	00bfffc4 	movi	r2,-1
    8224:	00000106 	br	822c <print_repeat+0x54>
    8228:	0005883a 	mov	r2,zero
    822c:	dfc00417 	ldw	ra,16(sp)
    8230:	dc800317 	ldw	r18,12(sp)
    8234:	dc400217 	ldw	r17,8(sp)
    8238:	dc000117 	ldw	r16,4(sp)
    823c:	dec00504 	addi	sp,sp,20
    8240:	f800283a 	ret

00008244 <___vfprintf_internal_r>:
    8244:	deffe504 	addi	sp,sp,-108
    8248:	d8c00804 	addi	r3,sp,32
    824c:	ddc01815 	stw	r23,96(sp)
    8250:	dd801715 	stw	r22,92(sp)
    8254:	dd401615 	stw	r21,88(sp)
    8258:	dd001515 	stw	r20,84(sp)
    825c:	dcc01415 	stw	r19,80(sp)
    8260:	dc801315 	stw	r18,76(sp)
    8264:	dc401215 	stw	r17,72(sp)
    8268:	dc001115 	stw	r16,68(sp)
    826c:	dfc01a15 	stw	ra,104(sp)
    8270:	df001915 	stw	fp,100(sp)
    8274:	2029883a 	mov	r20,r4
    8278:	2823883a 	mov	r17,r5
    827c:	382d883a 	mov	r22,r7
    8280:	d9800f15 	stw	r6,60(sp)
    8284:	0021883a 	mov	r16,zero
    8288:	d8000e15 	stw	zero,56(sp)
    828c:	d8000a15 	stw	zero,40(sp)
    8290:	002b883a 	mov	r21,zero
    8294:	0027883a 	mov	r19,zero
    8298:	0025883a 	mov	r18,zero
    829c:	d8000c15 	stw	zero,48(sp)
    82a0:	d8000b15 	stw	zero,44(sp)
    82a4:	002f883a 	mov	r23,zero
    82a8:	d8c00915 	stw	r3,36(sp)
    82ac:	d8c00f17 	ldw	r3,60(sp)
    82b0:	19000003 	ldbu	r4,0(r3)
    82b4:	20803fcc 	andi	r2,r4,255
    82b8:	1080201c 	xori	r2,r2,128
    82bc:	10bfe004 	addi	r2,r2,-128
    82c0:	10011e26 	beq	r2,zero,873c <___vfprintf_internal_r+0x4f8>
    82c4:	00c00044 	movi	r3,1
    82c8:	b8c01426 	beq	r23,r3,831c <___vfprintf_internal_r+0xd8>
    82cc:	1dc00216 	blt	r3,r23,82d8 <___vfprintf_internal_r+0x94>
    82d0:	b8000626 	beq	r23,zero,82ec <___vfprintf_internal_r+0xa8>
    82d4:	00011506 	br	872c <___vfprintf_internal_r+0x4e8>
    82d8:	01400084 	movi	r5,2
    82dc:	b9401d26 	beq	r23,r5,8354 <___vfprintf_internal_r+0x110>
    82e0:	014000c4 	movi	r5,3
    82e4:	b9402b26 	beq	r23,r5,8394 <___vfprintf_internal_r+0x150>
    82e8:	00011006 	br	872c <___vfprintf_internal_r+0x4e8>
    82ec:	01400944 	movi	r5,37
    82f0:	1140fc26 	beq	r2,r5,86e4 <___vfprintf_internal_r+0x4a0>
    82f4:	88800117 	ldw	r2,4(r17)
    82f8:	d9000005 	stb	r4,0(sp)
    82fc:	01c00044 	movi	r7,1
    8300:	d80d883a 	mov	r6,sp
    8304:	880b883a 	mov	r5,r17
    8308:	a009883a 	mov	r4,r20
    830c:	103ee83a 	callr	r2
    8310:	1000d81e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    8314:	84000044 	addi	r16,r16,1
    8318:	00010406 	br	872c <___vfprintf_internal_r+0x4e8>
    831c:	01400c04 	movi	r5,48
    8320:	1140fa26 	beq	r2,r5,870c <___vfprintf_internal_r+0x4c8>
    8324:	01400944 	movi	r5,37
    8328:	11400a1e 	bne	r2,r5,8354 <___vfprintf_internal_r+0x110>
    832c:	d8800005 	stb	r2,0(sp)
    8330:	88800117 	ldw	r2,4(r17)
    8334:	b80f883a 	mov	r7,r23
    8338:	d80d883a 	mov	r6,sp
    833c:	880b883a 	mov	r5,r17
    8340:	a009883a 	mov	r4,r20
    8344:	103ee83a 	callr	r2
    8348:	1000ca1e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    834c:	84000044 	addi	r16,r16,1
    8350:	0000f506 	br	8728 <___vfprintf_internal_r+0x4e4>
    8354:	25fff404 	addi	r23,r4,-48
    8358:	bdc03fcc 	andi	r23,r23,255
    835c:	00c00244 	movi	r3,9
    8360:	1dc00936 	bltu	r3,r23,8388 <___vfprintf_internal_r+0x144>
    8364:	00bfffc4 	movi	r2,-1
    8368:	90800426 	beq	r18,r2,837c <___vfprintf_internal_r+0x138>
    836c:	01400284 	movi	r5,10
    8370:	9009883a 	mov	r4,r18
    8374:	0008a500 	call	8a50 <__mulsi3>
    8378:	00000106 	br	8380 <___vfprintf_internal_r+0x13c>
    837c:	0005883a 	mov	r2,zero
    8380:	b8a5883a 	add	r18,r23,r2
    8384:	0000e206 	br	8710 <___vfprintf_internal_r+0x4cc>
    8388:	01400b84 	movi	r5,46
    838c:	1140e426 	beq	r2,r5,8720 <___vfprintf_internal_r+0x4dc>
    8390:	05c00084 	movi	r23,2
    8394:	213ff404 	addi	r4,r4,-48
    8398:	27003fcc 	andi	fp,r4,255
    839c:	00c00244 	movi	r3,9
    83a0:	1f000936 	bltu	r3,fp,83c8 <___vfprintf_internal_r+0x184>
    83a4:	00bfffc4 	movi	r2,-1
    83a8:	98800426 	beq	r19,r2,83bc <___vfprintf_internal_r+0x178>
    83ac:	01400284 	movi	r5,10
    83b0:	9809883a 	mov	r4,r19
    83b4:	0008a500 	call	8a50 <__mulsi3>
    83b8:	00000106 	br	83c0 <___vfprintf_internal_r+0x17c>
    83bc:	0005883a 	mov	r2,zero
    83c0:	e0a7883a 	add	r19,fp,r2
    83c4:	0000d906 	br	872c <___vfprintf_internal_r+0x4e8>
    83c8:	00c01b04 	movi	r3,108
    83cc:	10c0d226 	beq	r2,r3,8718 <___vfprintf_internal_r+0x4d4>
    83d0:	013fffc4 	movi	r4,-1
    83d4:	99000226 	beq	r19,r4,83e0 <___vfprintf_internal_r+0x19c>
    83d8:	d8000b15 	stw	zero,44(sp)
    83dc:	00000106 	br	83e4 <___vfprintf_internal_r+0x1a0>
    83e0:	04c00044 	movi	r19,1
    83e4:	01001a44 	movi	r4,105
    83e8:	11001626 	beq	r2,r4,8444 <___vfprintf_internal_r+0x200>
    83ec:	20800916 	blt	r4,r2,8414 <___vfprintf_internal_r+0x1d0>
    83f0:	010018c4 	movi	r4,99
    83f4:	11008826 	beq	r2,r4,8618 <___vfprintf_internal_r+0x3d4>
    83f8:	01001904 	movi	r4,100
    83fc:	11001126 	beq	r2,r4,8444 <___vfprintf_internal_r+0x200>
    8400:	01001604 	movi	r4,88
    8404:	1100c81e 	bne	r2,r4,8728 <___vfprintf_internal_r+0x4e4>
    8408:	00c00044 	movi	r3,1
    840c:	d8c00e15 	stw	r3,56(sp)
    8410:	00001506 	br	8468 <___vfprintf_internal_r+0x224>
    8414:	01001cc4 	movi	r4,115
    8418:	11009826 	beq	r2,r4,867c <___vfprintf_internal_r+0x438>
    841c:	20800416 	blt	r4,r2,8430 <___vfprintf_internal_r+0x1ec>
    8420:	01001bc4 	movi	r4,111
    8424:	1100c01e 	bne	r2,r4,8728 <___vfprintf_internal_r+0x4e4>
    8428:	05400204 	movi	r21,8
    842c:	00000f06 	br	846c <___vfprintf_internal_r+0x228>
    8430:	01001d44 	movi	r4,117
    8434:	11000d26 	beq	r2,r4,846c <___vfprintf_internal_r+0x228>
    8438:	01001e04 	movi	r4,120
    843c:	11000a26 	beq	r2,r4,8468 <___vfprintf_internal_r+0x224>
    8440:	0000b906 	br	8728 <___vfprintf_internal_r+0x4e4>
    8444:	d8c00a17 	ldw	r3,40(sp)
    8448:	b7000104 	addi	fp,r22,4
    844c:	18000726 	beq	r3,zero,846c <___vfprintf_internal_r+0x228>
    8450:	df000d15 	stw	fp,52(sp)
    8454:	b5c00017 	ldw	r23,0(r22)
    8458:	b800080e 	bge	r23,zero,847c <___vfprintf_internal_r+0x238>
    845c:	05efc83a 	sub	r23,zero,r23
    8460:	02400044 	movi	r9,1
    8464:	00000606 	br	8480 <___vfprintf_internal_r+0x23c>
    8468:	05400404 	movi	r21,16
    846c:	b0c00104 	addi	r3,r22,4
    8470:	d8c00d15 	stw	r3,52(sp)
    8474:	b5c00017 	ldw	r23,0(r22)
    8478:	d8000a15 	stw	zero,40(sp)
    847c:	0013883a 	mov	r9,zero
    8480:	d839883a 	mov	fp,sp
    8484:	b8001726 	beq	r23,zero,84e4 <___vfprintf_internal_r+0x2a0>
    8488:	a80b883a 	mov	r5,r21
    848c:	b809883a 	mov	r4,r23
    8490:	da401015 	stw	r9,64(sp)
    8494:	00089940 	call	8994 <__udivsi3>
    8498:	a80b883a 	mov	r5,r21
    849c:	1009883a 	mov	r4,r2
    84a0:	102d883a 	mov	r22,r2
    84a4:	0008a500 	call	8a50 <__mulsi3>
    84a8:	b885c83a 	sub	r2,r23,r2
    84ac:	00c00244 	movi	r3,9
    84b0:	da401017 	ldw	r9,64(sp)
    84b4:	18800216 	blt	r3,r2,84c0 <___vfprintf_internal_r+0x27c>
    84b8:	10800c04 	addi	r2,r2,48
    84bc:	00000506 	br	84d4 <___vfprintf_internal_r+0x290>
    84c0:	d8c00e17 	ldw	r3,56(sp)
    84c4:	18000226 	beq	r3,zero,84d0 <___vfprintf_internal_r+0x28c>
    84c8:	10800dc4 	addi	r2,r2,55
    84cc:	00000106 	br	84d4 <___vfprintf_internal_r+0x290>
    84d0:	108015c4 	addi	r2,r2,87
    84d4:	e0800005 	stb	r2,0(fp)
    84d8:	b02f883a 	mov	r23,r22
    84dc:	e7000044 	addi	fp,fp,1
    84e0:	003fe806 	br	8484 <_gp+0xffff771c>
    84e4:	e6efc83a 	sub	r23,fp,sp
    84e8:	9dc5c83a 	sub	r2,r19,r23
    84ec:	0080090e 	bge	zero,r2,8514 <___vfprintf_internal_r+0x2d0>
    84f0:	e085883a 	add	r2,fp,r2
    84f4:	01400c04 	movi	r5,48
    84f8:	d8c00917 	ldw	r3,36(sp)
    84fc:	e009883a 	mov	r4,fp
    8500:	e0c0032e 	bgeu	fp,r3,8510 <___vfprintf_internal_r+0x2cc>
    8504:	e7000044 	addi	fp,fp,1
    8508:	21400005 	stb	r5,0(r4)
    850c:	e0bffa1e 	bne	fp,r2,84f8 <_gp+0xffff7790>
    8510:	e6efc83a 	sub	r23,fp,sp
    8514:	d8c00b17 	ldw	r3,44(sp)
    8518:	4dd1883a 	add	r8,r9,r23
    851c:	922dc83a 	sub	r22,r18,r8
    8520:	18001626 	beq	r3,zero,857c <___vfprintf_internal_r+0x338>
    8524:	48000a26 	beq	r9,zero,8550 <___vfprintf_internal_r+0x30c>
    8528:	00800b44 	movi	r2,45
    852c:	d8800805 	stb	r2,32(sp)
    8530:	88800117 	ldw	r2,4(r17)
    8534:	01c00044 	movi	r7,1
    8538:	d9800804 	addi	r6,sp,32
    853c:	880b883a 	mov	r5,r17
    8540:	a009883a 	mov	r4,r20
    8544:	103ee83a 	callr	r2
    8548:	10004a1e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    854c:	84000044 	addi	r16,r16,1
    8550:	0580070e 	bge	zero,r22,8570 <___vfprintf_internal_r+0x32c>
    8554:	b00f883a 	mov	r7,r22
    8558:	01800c04 	movi	r6,48
    855c:	880b883a 	mov	r5,r17
    8560:	a009883a 	mov	r4,r20
    8564:	00081d80 	call	81d8 <print_repeat>
    8568:	1000421e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    856c:	85a1883a 	add	r16,r16,r22
    8570:	e02d883a 	mov	r22,fp
    8574:	bf2fc83a 	sub	r23,r23,fp
    8578:	00002006 	br	85fc <___vfprintf_internal_r+0x3b8>
    857c:	0580090e 	bge	zero,r22,85a4 <___vfprintf_internal_r+0x360>
    8580:	b00f883a 	mov	r7,r22
    8584:	01800804 	movi	r6,32
    8588:	880b883a 	mov	r5,r17
    858c:	a009883a 	mov	r4,r20
    8590:	da401015 	stw	r9,64(sp)
    8594:	00081d80 	call	81d8 <print_repeat>
    8598:	da401017 	ldw	r9,64(sp)
    859c:	1000351e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    85a0:	85a1883a 	add	r16,r16,r22
    85a4:	483ff226 	beq	r9,zero,8570 <_gp+0xffff7808>
    85a8:	00800b44 	movi	r2,45
    85ac:	d8800805 	stb	r2,32(sp)
    85b0:	88800117 	ldw	r2,4(r17)
    85b4:	01c00044 	movi	r7,1
    85b8:	d9800804 	addi	r6,sp,32
    85bc:	880b883a 	mov	r5,r17
    85c0:	a009883a 	mov	r4,r20
    85c4:	103ee83a 	callr	r2
    85c8:	10002a1e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    85cc:	84000044 	addi	r16,r16,1
    85d0:	003fe706 	br	8570 <_gp+0xffff7808>
    85d4:	b5bfffc4 	addi	r22,r22,-1
    85d8:	b0800003 	ldbu	r2,0(r22)
    85dc:	01c00044 	movi	r7,1
    85e0:	d9800804 	addi	r6,sp,32
    85e4:	d8800805 	stb	r2,32(sp)
    85e8:	88800117 	ldw	r2,4(r17)
    85ec:	880b883a 	mov	r5,r17
    85f0:	a009883a 	mov	r4,r20
    85f4:	103ee83a 	callr	r2
    85f8:	10001e1e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    85fc:	8585c83a 	sub	r2,r16,r22
    8600:	b5c9883a 	add	r4,r22,r23
    8604:	e085883a 	add	r2,fp,r2
    8608:	013ff216 	blt	zero,r4,85d4 <_gp+0xffff786c>
    860c:	1021883a 	mov	r16,r2
    8610:	dd800d17 	ldw	r22,52(sp)
    8614:	00004406 	br	8728 <___vfprintf_internal_r+0x4e4>
    8618:	00800044 	movi	r2,1
    861c:	1480080e 	bge	r2,r18,8640 <___vfprintf_internal_r+0x3fc>
    8620:	95ffffc4 	addi	r23,r18,-1
    8624:	b80f883a 	mov	r7,r23
    8628:	01800804 	movi	r6,32
    862c:	880b883a 	mov	r5,r17
    8630:	a009883a 	mov	r4,r20
    8634:	00081d80 	call	81d8 <print_repeat>
    8638:	10000e1e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    863c:	85e1883a 	add	r16,r16,r23
    8640:	b0800017 	ldw	r2,0(r22)
    8644:	01c00044 	movi	r7,1
    8648:	d80d883a 	mov	r6,sp
    864c:	d8800005 	stb	r2,0(sp)
    8650:	88800117 	ldw	r2,4(r17)
    8654:	880b883a 	mov	r5,r17
    8658:	a009883a 	mov	r4,r20
    865c:	b5c00104 	addi	r23,r22,4
    8660:	103ee83a 	callr	r2
    8664:	1000031e 	bne	r2,zero,8674 <___vfprintf_internal_r+0x430>
    8668:	84000044 	addi	r16,r16,1
    866c:	b82d883a 	mov	r22,r23
    8670:	00002d06 	br	8728 <___vfprintf_internal_r+0x4e4>
    8674:	00bfffc4 	movi	r2,-1
    8678:	00003106 	br	8740 <___vfprintf_internal_r+0x4fc>
    867c:	b5c00017 	ldw	r23,0(r22)
    8680:	b7000104 	addi	fp,r22,4
    8684:	b809883a 	mov	r4,r23
    8688:	00081bc0 	call	81bc <strlen>
    868c:	9091c83a 	sub	r8,r18,r2
    8690:	102d883a 	mov	r22,r2
    8694:	0200090e 	bge	zero,r8,86bc <___vfprintf_internal_r+0x478>
    8698:	400f883a 	mov	r7,r8
    869c:	01800804 	movi	r6,32
    86a0:	880b883a 	mov	r5,r17
    86a4:	a009883a 	mov	r4,r20
    86a8:	da001015 	stw	r8,64(sp)
    86ac:	00081d80 	call	81d8 <print_repeat>
    86b0:	da001017 	ldw	r8,64(sp)
    86b4:	103fef1e 	bne	r2,zero,8674 <_gp+0xffff790c>
    86b8:	8221883a 	add	r16,r16,r8
    86bc:	88800117 	ldw	r2,4(r17)
    86c0:	b00f883a 	mov	r7,r22
    86c4:	b80d883a 	mov	r6,r23
    86c8:	880b883a 	mov	r5,r17
    86cc:	a009883a 	mov	r4,r20
    86d0:	103ee83a 	callr	r2
    86d4:	103fe71e 	bne	r2,zero,8674 <_gp+0xffff790c>
    86d8:	85a1883a 	add	r16,r16,r22
    86dc:	e02d883a 	mov	r22,fp
    86e0:	00001106 	br	8728 <___vfprintf_internal_r+0x4e4>
    86e4:	00c00044 	movi	r3,1
    86e8:	04ffffc4 	movi	r19,-1
    86ec:	d8000e15 	stw	zero,56(sp)
    86f0:	d8c00a15 	stw	r3,40(sp)
    86f4:	05400284 	movi	r21,10
    86f8:	9825883a 	mov	r18,r19
    86fc:	d8000c15 	stw	zero,48(sp)
    8700:	d8000b15 	stw	zero,44(sp)
    8704:	182f883a 	mov	r23,r3
    8708:	00000806 	br	872c <___vfprintf_internal_r+0x4e8>
    870c:	ddc00b15 	stw	r23,44(sp)
    8710:	05c00084 	movi	r23,2
    8714:	00000506 	br	872c <___vfprintf_internal_r+0x4e8>
    8718:	00c00044 	movi	r3,1
    871c:	d8c00c15 	stw	r3,48(sp)
    8720:	05c000c4 	movi	r23,3
    8724:	00000106 	br	872c <___vfprintf_internal_r+0x4e8>
    8728:	002f883a 	mov	r23,zero
    872c:	d8c00f17 	ldw	r3,60(sp)
    8730:	18c00044 	addi	r3,r3,1
    8734:	d8c00f15 	stw	r3,60(sp)
    8738:	003edc06 	br	82ac <_gp+0xffff7544>
    873c:	8005883a 	mov	r2,r16
    8740:	dfc01a17 	ldw	ra,104(sp)
    8744:	df001917 	ldw	fp,100(sp)
    8748:	ddc01817 	ldw	r23,96(sp)
    874c:	dd801717 	ldw	r22,92(sp)
    8750:	dd401617 	ldw	r21,88(sp)
    8754:	dd001517 	ldw	r20,84(sp)
    8758:	dcc01417 	ldw	r19,80(sp)
    875c:	dc801317 	ldw	r18,76(sp)
    8760:	dc401217 	ldw	r17,72(sp)
    8764:	dc001117 	ldw	r16,68(sp)
    8768:	dec01b04 	addi	sp,sp,108
    876c:	f800283a 	ret

00008770 <__vfprintf_internal>:
    8770:	00800074 	movhi	r2,1
    8774:	10a35b04 	addi	r2,r2,-29332
    8778:	300f883a 	mov	r7,r6
    877c:	280d883a 	mov	r6,r5
    8780:	200b883a 	mov	r5,r4
    8784:	11000017 	ldw	r4,0(r2)
    8788:	00082441 	jmpi	8244 <___vfprintf_internal_r>

0000878c <__sfvwrite_small_dev>:
    878c:	2880000b 	ldhu	r2,0(r5)
    8790:	1080020c 	andi	r2,r2,8
    8794:	10002126 	beq	r2,zero,881c <__sfvwrite_small_dev+0x90>
    8798:	2880008f 	ldh	r2,2(r5)
    879c:	defffa04 	addi	sp,sp,-24
    87a0:	dc000015 	stw	r16,0(sp)
    87a4:	dfc00515 	stw	ra,20(sp)
    87a8:	dd000415 	stw	r20,16(sp)
    87ac:	dcc00315 	stw	r19,12(sp)
    87b0:	dc800215 	stw	r18,8(sp)
    87b4:	dc400115 	stw	r17,4(sp)
    87b8:	2821883a 	mov	r16,r5
    87bc:	10001216 	blt	r2,zero,8808 <__sfvwrite_small_dev+0x7c>
    87c0:	2027883a 	mov	r19,r4
    87c4:	3025883a 	mov	r18,r6
    87c8:	3823883a 	mov	r17,r7
    87cc:	05010004 	movi	r20,1024
    87d0:	04400b0e 	bge	zero,r17,8800 <__sfvwrite_small_dev+0x74>
    87d4:	880f883a 	mov	r7,r17
    87d8:	a440010e 	bge	r20,r17,87e0 <__sfvwrite_small_dev+0x54>
    87dc:	01c10004 	movi	r7,1024
    87e0:	8140008f 	ldh	r5,2(r16)
    87e4:	900d883a 	mov	r6,r18
    87e8:	9809883a 	mov	r4,r19
    87ec:	00088440 	call	8844 <_write_r>
    87f0:	0080050e 	bge	zero,r2,8808 <__sfvwrite_small_dev+0x7c>
    87f4:	88a3c83a 	sub	r17,r17,r2
    87f8:	90a5883a 	add	r18,r18,r2
    87fc:	003ff406 	br	87d0 <_gp+0xffff7a68>
    8800:	0005883a 	mov	r2,zero
    8804:	00000706 	br	8824 <__sfvwrite_small_dev+0x98>
    8808:	8080000b 	ldhu	r2,0(r16)
    880c:	10801014 	ori	r2,r2,64
    8810:	8080000d 	sth	r2,0(r16)
    8814:	00bfffc4 	movi	r2,-1
    8818:	00000206 	br	8824 <__sfvwrite_small_dev+0x98>
    881c:	00bfffc4 	movi	r2,-1
    8820:	f800283a 	ret
    8824:	dfc00517 	ldw	ra,20(sp)
    8828:	dd000417 	ldw	r20,16(sp)
    882c:	dcc00317 	ldw	r19,12(sp)
    8830:	dc800217 	ldw	r18,8(sp)
    8834:	dc400117 	ldw	r17,4(sp)
    8838:	dc000017 	ldw	r16,0(sp)
    883c:	dec00604 	addi	sp,sp,24
    8840:	f800283a 	ret

00008844 <_write_r>:
    8844:	defffd04 	addi	sp,sp,-12
    8848:	dc000015 	stw	r16,0(sp)
    884c:	04000074 	movhi	r16,1
    8850:	dc400115 	stw	r17,4(sp)
    8854:	84239a04 	addi	r16,r16,-29080
    8858:	2023883a 	mov	r17,r4
    885c:	2809883a 	mov	r4,r5
    8860:	300b883a 	mov	r5,r6
    8864:	380d883a 	mov	r6,r7
    8868:	dfc00215 	stw	ra,8(sp)
    886c:	80000015 	stw	zero,0(r16)
    8870:	0008b840 	call	8b84 <write>
    8874:	00ffffc4 	movi	r3,-1
    8878:	10c0031e 	bne	r2,r3,8888 <_write_r+0x44>
    887c:	80c00017 	ldw	r3,0(r16)
    8880:	18000126 	beq	r3,zero,8888 <_write_r+0x44>
    8884:	88c00015 	stw	r3,0(r17)
    8888:	dfc00217 	ldw	ra,8(sp)
    888c:	dc400117 	ldw	r17,4(sp)
    8890:	dc000017 	ldw	r16,0(sp)
    8894:	dec00304 	addi	sp,sp,12
    8898:	f800283a 	ret

0000889c <__divsi3>:
    889c:	20001b16 	blt	r4,zero,890c <__divsi3+0x70>
    88a0:	000f883a 	mov	r7,zero
    88a4:	28001616 	blt	r5,zero,8900 <__divsi3+0x64>
    88a8:	200d883a 	mov	r6,r4
    88ac:	29001a2e 	bgeu	r5,r4,8918 <__divsi3+0x7c>
    88b0:	00800804 	movi	r2,32
    88b4:	00c00044 	movi	r3,1
    88b8:	00000106 	br	88c0 <__divsi3+0x24>
    88bc:	10000d26 	beq	r2,zero,88f4 <__divsi3+0x58>
    88c0:	294b883a 	add	r5,r5,r5
    88c4:	10bfffc4 	addi	r2,r2,-1
    88c8:	18c7883a 	add	r3,r3,r3
    88cc:	293ffb36 	bltu	r5,r4,88bc <_gp+0xffff7b54>
    88d0:	0005883a 	mov	r2,zero
    88d4:	18000726 	beq	r3,zero,88f4 <__divsi3+0x58>
    88d8:	0005883a 	mov	r2,zero
    88dc:	31400236 	bltu	r6,r5,88e8 <__divsi3+0x4c>
    88e0:	314dc83a 	sub	r6,r6,r5
    88e4:	10c4b03a 	or	r2,r2,r3
    88e8:	1806d07a 	srli	r3,r3,1
    88ec:	280ad07a 	srli	r5,r5,1
    88f0:	183ffa1e 	bne	r3,zero,88dc <_gp+0xffff7b74>
    88f4:	38000126 	beq	r7,zero,88fc <__divsi3+0x60>
    88f8:	0085c83a 	sub	r2,zero,r2
    88fc:	f800283a 	ret
    8900:	014bc83a 	sub	r5,zero,r5
    8904:	39c0005c 	xori	r7,r7,1
    8908:	003fe706 	br	88a8 <_gp+0xffff7b40>
    890c:	0109c83a 	sub	r4,zero,r4
    8910:	01c00044 	movi	r7,1
    8914:	003fe306 	br	88a4 <_gp+0xffff7b3c>
    8918:	00c00044 	movi	r3,1
    891c:	003fee06 	br	88d8 <_gp+0xffff7b70>

00008920 <__modsi3>:
    8920:	20001716 	blt	r4,zero,8980 <__modsi3+0x60>
    8924:	000f883a 	mov	r7,zero
    8928:	2005883a 	mov	r2,r4
    892c:	28001216 	blt	r5,zero,8978 <__modsi3+0x58>
    8930:	2900162e 	bgeu	r5,r4,898c <__modsi3+0x6c>
    8934:	01800804 	movi	r6,32
    8938:	00c00044 	movi	r3,1
    893c:	00000106 	br	8944 <__modsi3+0x24>
    8940:	30000a26 	beq	r6,zero,896c <__modsi3+0x4c>
    8944:	294b883a 	add	r5,r5,r5
    8948:	31bfffc4 	addi	r6,r6,-1
    894c:	18c7883a 	add	r3,r3,r3
    8950:	293ffb36 	bltu	r5,r4,8940 <_gp+0xffff7bd8>
    8954:	18000526 	beq	r3,zero,896c <__modsi3+0x4c>
    8958:	1806d07a 	srli	r3,r3,1
    895c:	11400136 	bltu	r2,r5,8964 <__modsi3+0x44>
    8960:	1145c83a 	sub	r2,r2,r5
    8964:	280ad07a 	srli	r5,r5,1
    8968:	183ffb1e 	bne	r3,zero,8958 <_gp+0xffff7bf0>
    896c:	38000126 	beq	r7,zero,8974 <__modsi3+0x54>
    8970:	0085c83a 	sub	r2,zero,r2
    8974:	f800283a 	ret
    8978:	014bc83a 	sub	r5,zero,r5
    897c:	003fec06 	br	8930 <_gp+0xffff7bc8>
    8980:	0109c83a 	sub	r4,zero,r4
    8984:	01c00044 	movi	r7,1
    8988:	003fe706 	br	8928 <_gp+0xffff7bc0>
    898c:	00c00044 	movi	r3,1
    8990:	003ff106 	br	8958 <_gp+0xffff7bf0>

00008994 <__udivsi3>:
    8994:	200d883a 	mov	r6,r4
    8998:	2900152e 	bgeu	r5,r4,89f0 <__udivsi3+0x5c>
    899c:	28001416 	blt	r5,zero,89f0 <__udivsi3+0x5c>
    89a0:	00800804 	movi	r2,32
    89a4:	00c00044 	movi	r3,1
    89a8:	00000206 	br	89b4 <__udivsi3+0x20>
    89ac:	10000e26 	beq	r2,zero,89e8 <__udivsi3+0x54>
    89b0:	28000516 	blt	r5,zero,89c8 <__udivsi3+0x34>
    89b4:	294b883a 	add	r5,r5,r5
    89b8:	10bfffc4 	addi	r2,r2,-1
    89bc:	18c7883a 	add	r3,r3,r3
    89c0:	293ffa36 	bltu	r5,r4,89ac <_gp+0xffff7c44>
    89c4:	18000826 	beq	r3,zero,89e8 <__udivsi3+0x54>
    89c8:	0005883a 	mov	r2,zero
    89cc:	31400236 	bltu	r6,r5,89d8 <__udivsi3+0x44>
    89d0:	314dc83a 	sub	r6,r6,r5
    89d4:	10c4b03a 	or	r2,r2,r3
    89d8:	1806d07a 	srli	r3,r3,1
    89dc:	280ad07a 	srli	r5,r5,1
    89e0:	183ffa1e 	bne	r3,zero,89cc <_gp+0xffff7c64>
    89e4:	f800283a 	ret
    89e8:	0005883a 	mov	r2,zero
    89ec:	f800283a 	ret
    89f0:	00c00044 	movi	r3,1
    89f4:	003ff406 	br	89c8 <_gp+0xffff7c60>

000089f8 <__umodsi3>:
    89f8:	2005883a 	mov	r2,r4
    89fc:	2900122e 	bgeu	r5,r4,8a48 <__umodsi3+0x50>
    8a00:	28001116 	blt	r5,zero,8a48 <__umodsi3+0x50>
    8a04:	01800804 	movi	r6,32
    8a08:	00c00044 	movi	r3,1
    8a0c:	00000206 	br	8a18 <__umodsi3+0x20>
    8a10:	30000c26 	beq	r6,zero,8a44 <__umodsi3+0x4c>
    8a14:	28000516 	blt	r5,zero,8a2c <__umodsi3+0x34>
    8a18:	294b883a 	add	r5,r5,r5
    8a1c:	31bfffc4 	addi	r6,r6,-1
    8a20:	18c7883a 	add	r3,r3,r3
    8a24:	293ffa36 	bltu	r5,r4,8a10 <_gp+0xffff7ca8>
    8a28:	18000626 	beq	r3,zero,8a44 <__umodsi3+0x4c>
    8a2c:	1806d07a 	srli	r3,r3,1
    8a30:	11400136 	bltu	r2,r5,8a38 <__umodsi3+0x40>
    8a34:	1145c83a 	sub	r2,r2,r5
    8a38:	280ad07a 	srli	r5,r5,1
    8a3c:	183ffb1e 	bne	r3,zero,8a2c <_gp+0xffff7cc4>
    8a40:	f800283a 	ret
    8a44:	f800283a 	ret
    8a48:	00c00044 	movi	r3,1
    8a4c:	003ff706 	br	8a2c <_gp+0xffff7cc4>

00008a50 <__mulsi3>:
    8a50:	0005883a 	mov	r2,zero
    8a54:	20000726 	beq	r4,zero,8a74 <__mulsi3+0x24>
    8a58:	20c0004c 	andi	r3,r4,1
    8a5c:	2008d07a 	srli	r4,r4,1
    8a60:	18000126 	beq	r3,zero,8a68 <__mulsi3+0x18>
    8a64:	1145883a 	add	r2,r2,r5
    8a68:	294b883a 	add	r5,r5,r5
    8a6c:	203ffa1e 	bne	r4,zero,8a58 <_gp+0xffff7cf0>
    8a70:	f800283a 	ret
    8a74:	f800283a 	ret

00008a78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8a78:	deffff04 	addi	sp,sp,-4
    8a7c:	01000074 	movhi	r4,1
    8a80:	01400074 	movhi	r5,1
    8a84:	dfc00015 	stw	ra,0(sp)
    8a88:	21232204 	addi	r4,r4,-29560
    8a8c:	29635e04 	addi	r5,r5,-29320

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a90:	2140061e 	bne	r4,r5,8aac <alt_load+0x34>
    8a94:	01000074 	movhi	r4,1
    8a98:	01400074 	movhi	r5,1
    8a9c:	21200804 	addi	r4,r4,-32736
    8aa0:	29600804 	addi	r5,r5,-32736
    8aa4:	2140121e 	bne	r4,r5,8af0 <alt_load+0x78>
    8aa8:	00000b06 	br	8ad8 <alt_load+0x60>
    8aac:	00c00074 	movhi	r3,1
    8ab0:	18e35e04 	addi	r3,r3,-29320
    8ab4:	1907c83a 	sub	r3,r3,r4
    8ab8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8abc:	10fff526 	beq	r2,r3,8a94 <_gp+0xffff7d2c>
    {
      *to++ = *from++;
    8ac0:	114f883a 	add	r7,r2,r5
    8ac4:	39c00017 	ldw	r7,0(r7)
    8ac8:	110d883a 	add	r6,r2,r4
    8acc:	10800104 	addi	r2,r2,4
    8ad0:	31c00015 	stw	r7,0(r6)
    8ad4:	003ff906 	br	8abc <_gp+0xffff7d54>
    8ad8:	01000074 	movhi	r4,1
    8adc:	01400074 	movhi	r5,1
    8ae0:	21231304 	addi	r4,r4,-29620
    8ae4:	29631304 	addi	r5,r5,-29620

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8ae8:	2140101e 	bne	r4,r5,8b2c <alt_load+0xb4>
    8aec:	00000b06 	br	8b1c <alt_load+0xa4>
    8af0:	00c00074 	movhi	r3,1
    8af4:	18e00804 	addi	r3,r3,-32736
    8af8:	1907c83a 	sub	r3,r3,r4
    8afc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b00:	10fff526 	beq	r2,r3,8ad8 <_gp+0xffff7d70>
    {
      *to++ = *from++;
    8b04:	114f883a 	add	r7,r2,r5
    8b08:	39c00017 	ldw	r7,0(r7)
    8b0c:	110d883a 	add	r6,r2,r4
    8b10:	10800104 	addi	r2,r2,4
    8b14:	31c00015 	stw	r7,0(r6)
    8b18:	003ff906 	br	8b00 <_gp+0xffff7d98>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b1c:	0008c3c0 	call	8c3c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8b20:	dfc00017 	ldw	ra,0(sp)
    8b24:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8b28:	0008c401 	jmpi	8c40 <alt_icache_flush_all>
    8b2c:	00c00074 	movhi	r3,1
    8b30:	18e32204 	addi	r3,r3,-29560
    8b34:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8b38:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b3c:	18bff726 	beq	r3,r2,8b1c <_gp+0xffff7db4>
    {
      *to++ = *from++;
    8b40:	114f883a 	add	r7,r2,r5
    8b44:	39c00017 	ldw	r7,0(r7)
    8b48:	110d883a 	add	r6,r2,r4
    8b4c:	10800104 	addi	r2,r2,4
    8b50:	31c00015 	stw	r7,0(r6)
    8b54:	003ff906 	br	8b3c <_gp+0xffff7dd4>

00008b58 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b58:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b5c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b60:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b64:	0008be40 	call	8be4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8b68:	0008c040 	call	8c04 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b6c:	d1a04117 	ldw	r6,-32508(gp)
    8b70:	d1604217 	ldw	r5,-32504(gp)
    8b74:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8b78:	dfc00017 	ldw	ra,0(sp)
    8b7c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b80:	000805c1 	jmpi	805c <main>

00008b84 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8b84:	00800044 	movi	r2,1
    8b88:	20800226 	beq	r4,r2,8b94 <write+0x10>
    8b8c:	00800084 	movi	r2,2
    8b90:	2080041e 	bne	r4,r2,8ba4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8b94:	01000074 	movhi	r4,1
    8b98:	000f883a 	mov	r7,zero
    8b9c:	21235c04 	addi	r4,r4,-29328
    8ba0:	0008c081 	jmpi	8c08 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8ba4:	d0a00317 	ldw	r2,-32756(gp)
    8ba8:	10000926 	beq	r2,zero,8bd0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8bac:	deffff04 	addi	sp,sp,-4
    8bb0:	dfc00015 	stw	ra,0(sp)
    8bb4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8bb8:	00c01444 	movi	r3,81
    8bbc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8bc0:	00bfffc4 	movi	r2,-1
    8bc4:	dfc00017 	ldw	ra,0(sp)
    8bc8:	dec00104 	addi	sp,sp,4
    8bcc:	f800283a 	ret
    8bd0:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8bd4:	00c01444 	movi	r3,81
    8bd8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8bdc:	00bfffc4 	movi	r2,-1
    8be0:	f800283a 	ret

00008be4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8be4:	deffff04 	addi	sp,sp,-4
    8be8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8bec:	0008c440 	call	8c44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8bf0:	00800044 	movi	r2,1
    8bf4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8bf8:	dfc00017 	ldw	ra,0(sp)
    8bfc:	dec00104 	addi	sp,sp,4
    8c00:	f800283a 	ret

00008c04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8c04:	f800283a 	ret

00008c08 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8c08:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8c0c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8c10:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c14:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8c18:	2980072e 	bgeu	r5,r6,8c38 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c1c:	38c00037 	ldwio	r3,0(r7)
    8c20:	18ffffec 	andhi	r3,r3,65535
    8c24:	183ffc26 	beq	r3,zero,8c18 <_gp+0xffff7eb0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8c28:	28c00007 	ldb	r3,0(r5)
    8c2c:	20c00035 	stwio	r3,0(r4)
    8c30:	29400044 	addi	r5,r5,1
    8c34:	003ff806 	br	8c18 <_gp+0xffff7eb0>

  return count;
}
    8c38:	f800283a 	ret

00008c3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8c3c:	f800283a 	ret

00008c40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8c40:	f800283a 	ret

00008c44 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8c44:	000170fa 	wrctl	ienable,zero
    8c48:	f800283a 	ret
